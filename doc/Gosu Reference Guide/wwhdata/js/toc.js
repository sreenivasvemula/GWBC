function  WWHBookData_AddTOCEntries(P)
{
var A=P.fN("About BillingCenter Documentation","1");
var B=A.fN("Conventions in This Document","1#2127652");
B=A.fN("Support","1#2127698");
A=P.fN("Gosu Introduction","2");
B=A.fN("Welcome to Gosu","3");
var C=B.fN("Control Flow","3#1437383");
C=B.fN("Blocks","3#1469415");
C=B.fN("Enhancements","3#1435182");
C=B.fN("Collections","3#1441186");
C=B.fN("Access to Java Types","3#1435102");
C=B.fN("Gosu Classes and Properties","3#1440296");
C=B.fN("Interfaces","3#1450798");
C=B.fN("List and Array Expansion Operator *.","3#1450589");
C=B.fN("Comparisons","3#1452648");
C=B.fN("Case Sensitivity","3#1450590");
C=B.fN("Compound Assignment Statements","3#1454915");
C=B.fN("Delegating Interface Implementation with Composition","3#1457296");
C=B.fN("Concurrency","3#1456854");
C=B.fN("Exceptions","3#1457070");
C=B.fN("Annotations","3#1458452");
C=B.fN("Gosu Templates","3#1457886");
C=B.fN("XML and XSD Support","3#1460816");
C=B.fN("Web Service Support (Consuming WSDL)","3#1460937");
C=B.fN("Gosu Character Set","3#1484203");
B=A.fN("Running Gosu Programs and Calling Other Classes","4");
B=A.fN("More About the Gosu Type System","5");
C=B.fN("Compile Time Error Prevention","6");
C=B.fN("Type Inference","7");
C=B.fN("Intelligent Code Completion and Other Gosu Editor Tools","8");
C=B.fN("Null Safety for Properties and Other Operators","9");
C=B.fN("Generics in Gosu","10");
C=B.fN("Gosu Primitive Types","11");
B=A.fN("Gosu Case Sensitivity and Capitalization","12");
B=A.fN("Gosu Statement Terminators","13");
B=A.fN("Gosu Comments","14");
B=A.fN("Gosu Reserved Words","15");
B=A.fN("Legal Variable Names","16");
B=A.fN("Gosu Generated Documentation (Gosudoc)","17");
B=A.fN("Code Coverage Support","18");
B=A.fN("Notable Differences Between Gosu and Java","19");
B=A.fN("Get Ready for Gosu","20");
A=P.fN("Types","21");
B=A.fN("Access to Java Types","22");
B=A.fN("Primitive Types","23");
B=A.fN("Objects","24");
C=B.fN("Object Instantiation","24#1538265");
C=B.fN("Object Property Assignment","24#1538294");
C=B.fN("Object Property Access","24#1538306");
C=B.fN("Object Methods","24#1551631");
B=A.fN("Boolean Values","25");
B=A.fN("Sequences of Characters","26");
B=A.fN("Array Types","27");
C=B.fN("Creating an Array","27#1585564");
C=B.fN("Initializing an Array with Default Values","27#1535729");
C=B.fN("Accessing Elements of an Array","27#1535846");
C=B.fN("Iterating the Elements of an Array","27#1596942");
C=B.fN("Arrays and the Expansion Operator","27#1535889");
C=B.fN("Legacy Array Type","27#1614606");
C=B.fN("Array List Access with Array Index Notation","28");
C=B.fN("Entity Arrays and Their Automatic Methods","29");
C=B.fN("Associative Array Syntax for Property Access","30");
B=A.fN("Numeric Literals","31");
B=A.fN("Entity Types","32");
B=A.fN("Typekeys and Typelists","33");
C=B.fN("Typelist Literals","33#1550330");
C=B.fN("Typekey Literals","33#1550334");
C=B.fN("Getting Information from a Typekey","33#1550368");
B=A.fN("Compatibility with Earlier Gosu Releases","34");
C=B.fN("DateTime","34#1540293");
C=B.fN("Number","34#1541065");
C=B.fN("Array","34#1490826");
A=P.fN("Gosu Operators and Expressions","35");
B=A.fN("Gosu Operators","36");
C=B.fN("Operator Precedence","37");
B=A.fN("Standard Gosu Expressions","38");
B=A.fN("Arithmetic Expressions","39");
B=A.fN("Equality Expressions","40");
B=A.fN("Evaluation Expressions","41");
B=A.fN("Existence Testing Expressions","42");
B=A.fN("Logical Expressions","43");
B=A.fN("New Object Expressions","44");
B=A.fN("Relational Expressions","45");
B=A.fN("Unary Expressions","46");
B=A.fN("Importing Types and Package Namespaces","47");
B=A.fN("Conditional Ternary Expressions","48");
B=A.fN("Special Gosu Expressions","49");
C=B.fN("Function Calls","50");
C=B.fN("Static Method Calls","51");
C=B.fN("Static Property Paths","52");
C=B.fN("Entity and Typekey Type Literals","53");
B=A.fN("Handling Null Values In Expressions","54");
C=B.fN("Null-safe Property Access","54#1655840");
C=B.fN("Null-safe Default Operator","54#1606622");
C=B.fN("Null-safe Indexing for Arrays, Lists, and Maps","54#1598052");
C=B.fN("Null-safe Math Operators","54#1597472");
A=P.fN("Statements","55");
B=A.fN("Gosu Statements","56");
C=B.fN("Statement Lists","56#1440698");
C=B.fN("New Is Optionally a Statement","56#1503805");
B=A.fN("Gosu Variables","57");
C=B.fN("Variable Type Declaration","57#1141530");
C=B.fN("Variable Assignment","57#1453654");
B=A.fN("Gosu Conditional Execution and Looping","58");
C=B.fN("If - Else Statements","58#1142199");
C=B.fN("For Statements","58#1456475");
C=B.fN("While() Statements","58#1141335");
C=B.fN("Do\u2026While() Statements","58#1137579");
C=B.fN("Switch() Statements","58#1137580");
B=A.fN("Gosu Functions","59");
C=B.fN("Named Arguments and Argument Defaults","59#1483902");
C=B.fN("Public and Private Functions","59#1483028");
A=P.fN("Exception Handling","60");
B=A.fN("Handling Exceptions with try/catch/finally","61");
C=B.fN("Catching Exceptions","61#1515190");
B=A.fN("Throwing Exceptions","62");
B=A.fN("Object Lifecycle Management (using Clauses)","63");
C=B.fN("Disposable Objects","63#1466707");
C=B.fN("Closeable Objects and using Clauses","63#1466986");
C=B.fN("Reentrant Objects and using Clauses","63#1457358");
C=B.fN("Returning Values from using Clauses","63#1469250");
C=B.fN("Optional Use of a finally Clause with a using Clause","63#1514195");
B=A.fN("Assert Statements","64");
A=P.fN("Intervals","65");
B=A.fN("What are Intervals?","66");
C=B.fN("Reversing Interval Order","66#1456056");
C=B.fN("Granularity (Step and Unit)","66#1456531");
B=A.fN("Writing Your Own Interval Type","67");
C=B.fN("Custom Iterable Intervals Using Sequenceable Items","67#1461393");
C=B.fN("Custom Iterable Intervals Using Manually-written Iterators","67#1462661");
C=B.fN("Custom Non-iterable Interval Types","67#1461152");
A=P.fN("Calling Java from Gosu","68");
B=A.fN("Overview of Writing Gosu Code that Calls Java","69");
C=B.fN("Many Java Classes are Core Classes for Gosu","69#2134273");
C=B.fN("Java Packages in Scope","69#2131311");
C=B.fN("Static Members and Static Import in Gosu","69#2047802");
C=B.fN("Java get/set/is Methods Convert to Gosu Properties","69#2021794");
C=B.fN("Interfaces","69#2020668");
C=B.fN("Enumerations","69#2020577");
C=B.fN("Annotations","69#2047848");
C=B.fN("Java Primitives","69#2047899");
C=B.fN("Java Generics","69#2135372");
A=P.fN("Query Builder APIs","70");
B=A.fN("Overview of the Query Builder APIs","71");
C=B.fN("The Processing Cycle of Queries","71#2237067");
C=B.fN("SQL Select Statements and Query Builder APIs Compared","71#2237083");
B=A.fN("Building Simple Queries","72");
C=B.fN("Restricting the Results of a Simple Query","72#2237297");
C=B.fN("Ordering the Results of a Simple Query","72#2237312");
C=B.fN("Accessing the Results of a Simple Query","72#2237326");
B=A.fN("Joining Related Entities to Queries","73");
C=B.fN("Joining an Entity to a Query with a Simple Join","74");
C=B.fN("Restricting Query Results with Fields on Joined Entities","75");
C=B.fN("Different Ways to Join Related Entities to Queries","76");
C=B.fN("Making a Query with an Inner Join","77");
C=B.fN("Making a Query with a Left Outer Join","78");
C=B.fN("Adding Predicates to Joined Entities","79");
C=B.fN("Handling Duplicates in Joins with Foreign Keys on the Right","80");
B=A.fN("Restricting Queries with Predicates on Fields","81");
C=B.fN("Using Comparison Predicates with Character Fields","82");
C=B.fN("Using Comparison Predicates with Date and Time Fields","83");
C=B.fN("Using Comparison Predicates with Null Values","84");
C=B.fN("Using Set Inclusion and Exclusion Predicates","85");
C=B.fN("Comparing Column Values with Each Other","86");
C=B.fN("Comparing Column Values with Literal Values","87");
C=B.fN("Comparing Typekey Column Values with Typekey Literals","88");
C=B.fN("Combining Predicates with AND and OR Logic","89");
C=B.fN("Predicate Methods Reference","90");
B=A.fN("Working with Row Queries","91");
C=B.fN("Setting Up Row Queries","91#2930783");
C=B.fN("Database Aggregate Functions Within Select Blocks","92");
C=B.fN("Applying Functions to Selected Fields","93");
C=B.fN("Limitations of Row Queries","94");
B=A.fN("Working with Results","95");
C=B.fN("What Result Objects Contain","96");
C=B.fN("Filtering Results with Standard Query Filters","97");
C=B.fN("Ordering Results","98");
C=B.fN("Useful Properties and Methods on Result Objects","99");
C=B.fN("Converting Result Objects to Lists, Arrays, Collections, and Sets","100");
C=B.fN("Updating Entity Instances in Query Results","101");
B=A.fN("Testing and Optimizing Queries","102");
C=B.fN("Performance Differences Between Entity and Row Queries","103");
C=B.fN("Viewing the SQL Select Statement for a Query","104");
C=B.fN("Enabling Context Comments in Queries on SQL Server","105");
C=B.fN("Including Retired Entities in Query Results","106");
C=B.fN("Setting the Page Size for Prefetching Query Results","107");
C=B.fN("Chaining Query Builder Methods","108");
C=B.fN("Working with Advanced Inline Views","109");
B=A.fN("Method and Type Reference for the Query Builder APIs","110");
B=A.fN("Paths and Restriction Builders","111");
C=B.fN("Property References","111#3504638");
C=B.fN("Paths","111#3504651");
C=B.fN("Restrictions","111#3504668");
A=P.fN("Find Expressions","112");
B=A.fN("Basic Find Expressions","112#1425943");
C=B.fN("Find Expressions that Use and/or Operators","112#1417461");
C=B.fN("Find Expressions that Use Equality and Relational Operators","112#1137084");
C=B.fN("Find Expressions that Use Where...In Clauses","112#1359589");
C=B.fN("Find Expressions and Non-Equality Comparisons","112#1370677");
C=B.fN("Restrictions in Find Queries for Encrypted Properties","112#1446636");
B=A.fN("Using Exists Expressions for Array Properties in Find Expressions","112#1359679");
C=B.fN("Fixing Invalid Queries by Adding Exists Clauses","112#1360475");
C=B.fN("Combining Exists Expressions","112#1358792");
B=A.fN("Find Expressions that Use Special Substring Keywords","112#1359890");
B=A.fN("Using the Results of Find Expressions (Using Query Objects)","112#1289012");
C=B.fN("Basic Iterator Example","112#1361185");
C=B.fN("Handling Large Query Objects from Find Expressions","112#1220606");
C=B.fN("Retrieving a Single Row from Find Expression Results","112#1137173");
C=B.fN("Found Entities Are Read-only Until Added to a Bundle","112#1361064");
C=B.fN("Query Objects Returned by Find Expressions Are Always Dynamic","112#1360246");
A=P.fN("Classes","113");
B=A.fN("What Are Classes?","114");
B=A.fN("Creating and Instantiating Classes","115");
C=B.fN("Creating a New Instance of a Class","115#2449212");
C=B.fN("Naming Conventions for Packages and Classes","115#2447745");
B=A.fN("Properties","116");
C=B.fN("Properties Act Like Data But They Are Dynamic and Virtual Functions","116#2477145");
C=B.fN("Property Paths are Null Tolerant","116#2465283");
C=B.fN("Static Properties","116#2449277");
C=B.fN("More Property Examples","116#2447851");
B=A.fN("Modifiers","117");
C=B.fN("Access Modifiers","117#2445688");
C=B.fN("Override Modifier","117#2449862");
C=B.fN("Abstract Modifier","117#2449868");
C=B.fN("Final Modifier","117#2449875");
C=B.fN("Static Modifier","117#2446412");
B=A.fN("Inner Classes","118");
C=B.fN("Named Inner Classes","118#2450636");
C=B.fN("Anonymous Inner Classes","118#2450064");
A=P.fN("Enumerations","119");
B=A.fN("Using Enumerations","120");
C=B.fN("Extracting Information from Enumerations","120#1459344");
C=B.fN("Comparing Enumerations","120#1459295");
A=P.fN("Interfaces","121");
B=A.fN("What is an Interface?","122");
B=A.fN("Defining and Using an Interface","123");
C=B.fN("Defining and Using Properties with Interfaces","123#1457203");
C=B.fN("Modifiers and Interfaces","123#1459141");
A=P.fN("Composition","124");
B=A.fN("Using Gosu Composition","125");
C=B.fN("Overriding Methods Independent of the Delegate Class","125#2201000");
C=B.fN("Declaring Delegate Implementation Type in the Variable Definition","125#2198236");
C=B.fN("Using One Delegate for Multiple Interfaces","125#2198240");
C=B.fN("Using Composition With Built-in Interfaces","125#2198246");
A=P.fN("Annotations","126");
B=A.fN("Annotating a Class, Method, Type, Class Variable, or Argument","127");
C=B.fN("Built-in Annotations","127#1471842");
B=A.fN("Annotations at Run Time","128");
C=B.fN("Gosu Class Function Parameter Argument Annotations at Run Time","128#1491415");
B=A.fN("Defining Your Own Annotations","129");
C=B.fN("Customizing Annotation Usage","129#1434674");
A=P.fN("Enhancements","130");
B=A.fN("Using Enhancements","131");
C=B.fN("Syntax for Using Enhancements","131#1439437");
C=B.fN("Creating a New Enhancement","131#1439200");
C=B.fN("Syntax for Defining Enhancements","131#1439430");
C=B.fN("Enhancement Naming and Package Conventions","131#1437458");
C=B.fN("Enhancements on Arrays","131#1438604");
A=P.fN("Gosu Blocks","132");
B=A.fN("What Are Blocks?","133");
B=A.fN("Basic Block Definition and Invocation","134");
B=A.fN("Variable Scope and Capturing Variables In Blocks","135");
B=A.fN("Argument Type Inference Shortcut In Certain Cases","136");
B=A.fN("Block Type Literals","137");
B=A.fN("Blocks and Collections","138");
B=A.fN("Blocks as Shortcuts for Anonymous Classes","139");
A=P.fN("Gosu Generics","140");
B=A.fN("Gosu Generics Overview","141");
B=A.fN("Using Gosu Generics","142");
C=B.fN("Parameterized Classes","142#1454721");
C=B.fN("Parameterized Methods","142#1454736");
B=A.fN("Other Unbounded Generics Wildcards","143");
B=A.fN("Generics and Blocks","144");
B=A.fN("How Generics Help Define Collection APIs","145");
B=A.fN("Multiple Dimensionality Generics","146");
B=A.fN("Generics With Custom Containers","147");
C=B.fN("Generics with Non-Containers","147#1446525");
A=P.fN("Collections","148");
B=A.fN("Basic Lists","149");
C=B.fN("Creating a List","149#1451974");
C=B.fN("Type Inference and List Initialization","149#1452009");
C=B.fN("Getting and Setting List Values","149#1467078");
C=B.fN("Special Behavior of List Interface in Gosu","149#1466017");
C=B.fN("Sorting Lists","149#1535515");
B=A.fN("Basic Hash Maps","150");
C=B.fN("Creating a Hash Map","150#1452165");
C=B.fN("Getting and Setting Values in a Hash Map","150#1452408");
C=B.fN("Creating a Hash Map with Type Inference","150#1452539");
C=B.fN("Special Enhancements on Maps","150#1452216");
C=B.fN("Wrapped Maps with Default Values","150#1501650");
B=A.fN("List and Array Expansion (*.)","151");
C=B.fN("Array Flattening to Single Dimensional Array","151#1466345");
B=A.fN("Enhancement Reference for Collections and Related Types","152");
C=B.fN("Collections Enhancement Methods","153");
C=B.fN("Finding Data in Collections","153#1462591");
C=B.fN("Sorting Lists or Other Comparable Collections","153#1505126");
C=B.fN("Mapping Data in Collections","153#1537955");
C=B.fN("Iterating Across Collections","153#1442285");
C=B.fN("Partitioning Collections","153#1442296");
C=B.fN("Converting Lists, Arrays, and Sets","153#1449882");
C=B.fN("Flat Mapping a Series of Collections or Arrays","153#1450050");
C=B.fN("Sizes and Length of Collections and Strings are Equivalent","153#1443101");
A=P.fN("Gosu and XML","154");
B=A.fN("Manipulating XML Overview","155");
C=B.fN("Legacy XML Support","156");
B=A.fN("Introduction to the XML Element in Gosu","157");
C=B.fN("Dollar Sign Prefix for Properties that Are XSD Types","158");
B=A.fN("Exporting XML Data","159");
C=B.fN("Export-related Methods on an XML Element","159#1866472");
C=B.fN("XML Serialization Options Reference and Examples","159#1911570");
B=A.fN("Parsing XML Data into an XML Element","160");
B=A.fN("Creating Many Qualified Names in the Same Namespace","161");
B=A.fN("XSD-based Properties and Types","162");
C=B.fN("Important Concepts in XSD Properties and Types","162#1651042");
C=B.fN("XSD Generated Type Examples","162#1673249");
C=B.fN("Automatic Insertion into Lists","162#1673851");
C=B.fN("XSD List Property Example","162#1610237");
B=A.fN("Getting Data From an XML Element","163");
C=B.fN("Manipulating Elements and Values (Works With or Without XSD)","163#1538638");
C=B.fN("Attributes","163#1520181");
B=A.fN("Simple Values","164");
C=B.fN("Methods to Create XML Simple Values","164#1622820");
C=B.fN("XSD to Gosu Simple Type Mappings","164#1622952");
C=B.fN("Facet Validation","164#1623085");
B=A.fN("Access the Nillness of an Element","165");
B=A.fN("Automatic Creation of Intermediary Elements","166");
B=A.fN("Default and Fixed Attribute Values","167");
B=A.fN("Substitution Group Hierarchies","168");
B=A.fN("Element Sorting for XSD-based Elements","169");
B=A.fN("Built-in Schemas","170");
C=B.fN("The XSD that Defines an XSD (The Metaschema)","170#1541995");
B=A.fN("Use a Local XSD for an External Namespace or XSD Location","171");
B=A.fN("Schema Access Type","172");
B=A.fN("The Guidewire XML (GX) Modeler","173");
C=B.fN("Automatic Publishing of the Generated XSD","174");
C=B.fN("Generating XML Using an XML Model","175");
C=B.fN("Customizing GX Modeler Output (GXOptions)","176");
C=B.fN("Parsing XML Into an XML Model","177");
C=B.fN("Arrays of Entities in XML Output","178");
C=B.fN("Complete Guidewire XML Model Example","179");
C=B.fN("XML Serialization Performance and Element Sorting","179#1931305");
C=B.fN("Type Conversions from Gosu Types to XSD Types","179#1865256");
B=A.fN("Legacy XML APIs: Manipulating XML as Untyped Nodes","180");
C=B.fN("Untyped Node Operations","180#1865288");
C=B.fN("Example of Manipulating XML as Untyped Nodes","181");
B=A.fN("Legacy XML APIs: Exporting XML Data","182");
B=A.fN("Legacy XML APIs: Collection-like Enhancements for XML","183");
B=A.fN("Legacy XML APIs: Structured XML Using XSDs","184");
C=B.fN("Importing Strongly-Typed XML","185");
C=B.fN("Writing Strongly-Typed XML","186");
C=B.fN("Handling XSD Choices in XML","187");
C=B.fN("Gosu Type to XSD Type Conversion Reference","188");
C=B.fN("XSD Namespaces and Qualified Names","189");
C=B.fN("Autocreation of Intermediate Nodes","190");
C=B.fN("XML Node IDs","191");
C=B.fN("Date Handling in XSDs","192");
A=P.fN("Bundles and Database Transactions","193");
B=A.fN("When to Use Database Transaction APIs","194");
B=A.fN("Bundle Overview","195");
B=A.fN("Adding Entity Instances to Bundles","196");
C=B.fN("Making an Entity Instance Writable By Adding to a Bundle","196#1562051");
C=B.fN("Moving a Writable Entity Instance to a New Writable Bundle","196#1640335");
B=A.fN("Getting the Bundle of an Existing Entity Instance","197");
B=A.fN("Getting an Entity from a Public ID or a Key (Internal ID)","198");
B=A.fN("Creating New Entity Instances in Specific Bundles","199");
B=A.fN("Committing a Bundle Explicitly in Very Rare Cases","200");
B=A.fN("Removing Entity Instances from the Database","201");
B=A.fN("Determining What Data Changed in a Bundle","202");
C=B.fN("Detecting Property Changes on an Entity Instance","202#1631064");
C=B.fN("Getting Changes to Entity Arrays in the Current Bundle","202#1613756");
C=B.fN("Getting Add, Changed, or Deleted Entities In a Bundle","202#1613798");
B=A.fN("Running Code in an Entirely New Bundle","203");
C=B.fN("Create Bundle For a Specific BillingCenter User","203#1583029");
C=B.fN("Warning about Transaction Class Confusion","203#1602225");
B=A.fN("Exception Handling And Database Commits","204");
B=A.fN("Bundles and Published Web Services","205");
B=A.fN("Entity Cache Versioning, Locking, and Entity Refreshing","206");
C=B.fN("Entity Instance Versioning and the Entity Touch API","206#1571322");
C=B.fN("Record Locking for Concurrent Data Access","206#1568961");
C=B.fN("User Interface Bundle Refreshes","206#1568698");
B=A.fN("Details of Bundle Commit Steps","207");
C=B.fN("Handling of Entity Denorm Fields","207#1570475");
A=P.fN("Gosu Templates","208");
B=A.fN("Template Overview","209");
C=B.fN("Template Expressions","209#1464080");
C=B.fN("When to Escape Special Characters for Templates","210");
B=A.fN("Using Template Files","211");
C=B.fN("Creating and Running a Template File","211#1464601");
C=B.fN("Template Scriptlet Tags","211#1461443");
C=B.fN("Template Parameters","211#1463866");
C=B.fN("Extending a Template From a Class","211#1455745");
C=B.fN("Template Comments","211#1463274");
B=A.fN("Template Export Formats","211#1465221");
A=P.fN("Type System","212");
B=A.fN("The Type of All Types","213");
B=A.fN("Basic Type Coercion","214");
B=A.fN("Basic Type Checking","215");
C=B.fN("Automatic Downcasting for typeis and typeof","215#1455253");
B=A.fN("Using Reflection","216");
C=B.fN("Type Object Properties","216#1441372");
C=B.fN("Java Type Reflection","216#1441477");
C=B.fN("Type System Class","216#1465566");
C=B.fN("Feature Literals","216#1487207");
B=A.fN("Compound Types","217");
B=A.fN("Type Loaders","218");
A=P.fN("Concurrency","219");
B=A.fN("Overview of Thread Safety and Concurrency","220");
B=A.fN("Request and Session Scoped Variables","221");
B=A.fN("Concurrent Lazy Variables","222");
C=B.fN("Optional Non-Locking Lazy Variables","222#1507282");
B=A.fN("Concurrent Cache","223");
B=A.fN("Concurrency with Monitor Locks and Reentrant Objects","224");
A=P.fN("Gosu Command Line Shell","225");
B=A.fN("Gosu Command Line Tool Basics","226");
C=B.fN("Accessing Entities and Other Types from the Gosu Command Line Shell","226#2211972");
C=B.fN("Unpacking and Installing the Gosu Command Line Shell","226#2211984");
C=B.fN("Command Line Tool Options","226#2182333");
C=B.fN("Writing a Simple Gosu Command Line Program","226#2208954");
B=A.fN("Command Line Arguments","227");
B=A.fN("Advanced Class Loading Registry","228");
B=A.fN("Gosu Interactive Shell","229");
B=A.fN("Helpful APIs for Command Line Gosu Programs","230");
A=P.fN("Gosu Programs","231");
B=A.fN("The Structure of a Gosu Program","232");
C=B.fN("Metaline as First Line","232#2209342");
C=B.fN("Functions in a Gosu Program","232#2209347");
C=B.fN("Setting the Class Path to Call Other Gosu or Java Classes","232#2209362");
A=P.fN("Running Local Shell Commands","233");
B=A.fN("Running Command Line Tools from Gosu","233#2186018");
A=P.fN("Checksums","234");
B=A.fN("Overview of Checksums","235");
B=A.fN("Creating Fingerprints","235#1442951");
C=B.fN("How to Output Data Inside a Fingerprint","235#1443786");
B=A.fN("Extending Fingerprints","235#1442456");
A=P.fN("Properties Files","236");
B=A.fN("Reading Properties Files","236#1458192");
A=P.fN("Coding Style","237");
B=A.fN("General Coding Guidelines","238");
C=B.fN("Omit Semicolons","238#1445233");
C=B.fN("Type Declarations","238#1445238");
C=B.fN("The == and != Operator Recommendations and Warnings","238#1445388");
C=B.fN("Capitalization Conventions","238#1458561");
C=B.fN("Class Variable and Class Property Recommendations","238#1446206");
C=B.fN("Use typeis Inference","238#1454113");
}
