function FileData_Pairs(x)
{
x.t("example","creates");
x.t("example","simple");
x.t("example","union");
x.t("example","restrictionbuilder.compareset");
x.t("example","following");
x.t("example","var");
x.t("searching","database");
x.t("four","subclasses");
x.t("supports","relational");
x.t("unlike","compare");
x.t("rb1.union","(rb2)");
x.t("method","example");
x.t("method","supports");
x.t("method","method");
x.t("method","restriction");
x.t("method","arguments");
x.t("method","creates");
x.t("method","path");
x.t("method","works");
x.t("method","filterquery");
x.t("method","capable");
x.t("method","called");
x.t("method","signatures");
x.t("method","restrictionbuilder.compare");
x.t("method","returns");
x.t("method","var");
x.t("properties","properties");
x.t("properties","directly");
x.t("possible","values");
x.t("else","create");
x.t("construct","new");
x.t("greaterthanorequals","compare");
x.t("restriction","defines");
x.t("restriction","anything");
x.t("restriction","restriction");
x.t("restriction","built-in");
x.t("restriction","type");
x.t("restriction","objects");
x.t("restriction","api");
x.t("restriction","test");
x.t("restriction","no");
x.t("restriction","combine");
x.t("restriction","equivalent");
x.t("restriction","represents");
x.t("restriction","abstract");
x.t("restriction","builder");
x.t("restriction","builders");
x.t("restriction","object");
x.t("easy","write");
x.t("right","side");
x.t("defines","search");
x.t("anything","else");
x.t("rather","modifying");
x.t("implement","interface");
x.t("unionrestriction","restriction");
x.t("unionrestriction","original");
x.t("unionrestriction","objects");
x.t("unionrestriction","described");
x.t("unionrestriction","object");
x.t("pathrestriction","path");
x.t("pathrestriction","reloprestriction");
x.t("pathrestriction","compoundrestriction");
x.t("relational","operator");
x.t("independently","example");
x.t("create","restriction");
x.t("create","unionrestriction");
x.t("create","later");
x.t("create","property");
x.t("create","new");
x.t("create","path");
x.t("create","queries");
x.t("create","query");
x.t("create","compoundrestriction");
x.t("create","either");
x.t("static","method");
x.t("contact","usercontact");
x.t("immutable","list");
x.t("leaf","value");
x.t("built-in","apis");
x.t("built-in","code");
x.t("subclasses","restrictionbuilder");
x.t("subclasses","nonunionrestriction");
x.t("evaluating","path");
x.t("tree","affects");
x.t("studio","gosu");
x.t("persistent","properties");
x.t("persistent","property");
x.t("persistent","fields");
x.t("pathaslist","path.aslist");
x.t("binary","tree");
x.t("parts","owning");
x.t("arguments","method");
x.t("arguments","restriction");
x.t("creates","new");
x.t("creates","path");
x.t("user","contact");
x.t("user","entity");
x.t("converting","path");
x.t("(rb2)","//");
x.t("cache","objects");
x.t("cache","searches");
x.t("uses","database");
x.t("uses","gw.api.path.paths");
x.t("uses","gw.api.restriction.restrictionbuilder");
x.t("membership","check");
x.t("later","code");
x.t("text_val.select","link");
x.t("restrictionbuilder","rather");
x.t("restrictionbuilder","create");
x.t("restrictionbuilder","apis");
x.t("restrictionbuilder","objects");
x.t("restrictionbuilder","union");
x.t("restrictionbuilder","abstract");
x.t("restrictionbuilder","call");
x.t("restrictionbuilder","restrictionbuilder.make");
x.t("restrictionbuilder","class");
x.t("errors","query");
x.t("essentially","type-safe");
x.t("interface","query");
x.t("interface","two");
x.t("interface","nonunionrestriction");
x.t("support","paths");
x.t("greaterthan","lessthanorequals");
x.t("type","interface");
x.t("type","type");
x.t("type","property");
x.t("type","feature");
x.t("type","subtype");
x.t("type","gw.api.path.path");
x.t("type","immediately");
x.t("type","system");
x.t("type","var");
x.t("persistentpath","contains");
x.t("suited","searching");
x.t("customer","apis");
x.t("relop","enumeration");
x.t("relop","operators");
x.t("relop","query");
x.t("left","side");
x.t("simplerestrictionbuilder","simple");
x.t("execution","less");
x.t("however","unionrestriction");
x.t("however","billingcenter");
x.t("employeeids","combining");
x.t("form","binary");
x.t("apis","require");
x.t("apis","directly");
x.t("apis","path");
x.t("apis","easier");
x.t("apis","relevant");
x.t("apis","paths");
x.t("guidewire","query");
x.t("property","name");
x.t("property","path");
x.t("property","references");
x.t("property","gosu");
x.t("property","appears");
x.t("property","reference");
x.t("property","query");
x.t("property","append");
x.t("encapsulated","object");
x.t("convert","path");
x.t("getleafvalue","method");
x.t("require","restriction");
x.t("original","restrictionbuilder");
x.t("original","union");
x.t("original","continue");
x.t("original","restrictions");
x.t("scratchpad","uses");
x.t("default","configuration");
x.t("link","directly");
x.t("objects","restriction");
x.t("objects","directly");
x.t("objects","union");
x.t("objects","unionrestrictionbuilder");
x.t("objects","loaded");
x.t("objects","local");
x.t("objects","logical");
x.t("objects","capability");
x.t("objects","together");
x.t("objects","uncommitted");
x.t("objects","typical");
x.t("objects","used");
x.t("objects","pass");
x.t("objects","compare");
x.t("consists","two");
x.t("element","left");
x.t("element","path");
x.t("new","restriction");
x.t("new","unionrestriction");
x.t("new","restrictionbuilder");
x.t("new","abstract");
x.t("new","object");
x.t("single","value");
x.t("items","using");
x.t("rb.create",".makequery");
x.t("loop","res");
x.t("loop","--");
x.t("rb2.compare","paths.make");
x.t("messsage","gosu");
x.t("list","example");
x.t("list","property");
x.t("list","convert");
x.t("list","implements");
x.t("combines","results");
x.t("beginning","loop");
x.t("guide","query");
x.t("api","easy");
x.t("api","property");
x.t("api","addition");
x.t("type-safe","list");
x.t("type-safe","reference");
x.t("results","query");
x.t("results","print");
x.t("results","two");
x.t("filter","queries");
x.t("simple","restriction");
x.t("simple","relop");
x.t("simple","test");
x.t("lessthanorequals","greaterthanorequals");
x.t("check","result");
x.t("check","employee");
x.t("(iselectquerybuilder)","method");
x.t("directly","implement");
x.t("directly","map");
x.t("directly","instead");
x.t("directly","predicate");
x.t("directly","page");
x.t("directly","makequery");
x.t("declare","property");
x.t("specified","value");
x.t("specified","represent");
x.t("100-01234","//");
x.t("100-01234","compare");
x.t("iterable","object");
x.t("test","following");
x.t("test","using");
x.t("text_val.focus","text_val.select");
x.t("path","create");
x.t("path","immutable");
x.t("path","leaf");
x.t("path","restrictionbuilder");
x.t("path","essentially");
x.t("path","interface");
x.t("path","single");
x.t("path","list");
x.t("path","specified");
x.t("path","words");
x.t("path","owning");
x.t("path","paths.make");
x.t("path","setrestriction");
x.t("path","path.append");
x.t("path","programming");
x.t("path","two");
x.t("path","gw.api.path.paths");
x.t("path","using");
x.t("path","append");
x.t("path","member");
x.t("path","restrictions");
x.t("path","object");
x.t("faster","execution");
x.t("name","type");
x.t("no","supported");
x.t("no","employee");
x.t("union","rb1.union");
x.t("union","method");
x.t("union","restriction");
x.t("union","restrictionbuilder");
x.t("union","results");
x.t("union","memory");
x.t("union","restrictionbuilder.union");
x.t("union","two");
x.t("union","restrictions");
x.t("gosu","type");
x.t("gosu","scratchpad");
x.t("gosu","standard");
x.t("gosu","feature");
x.t("gosu","reference");
x.t("searches","consistent");
x.t("searches","in-memory");
x.t("searches","database");
x.t("references","persistent");
x.t("references","property");
x.t("references","encapsulated");
x.t("references","making");
x.t("references","represent");
x.t("references","paths");
x.t("references","var");
x.t("constructor","cannot");
x.t("unionrestrictionbuilder","union");
x.t("enumeration","values");
x.t("//rb.compare","paths.make");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("programmer","errors");
x.t("methods","create");
x.t("methods","union");
x.t("filtering","given");
x.t("notequals","100-01234");
x.t("notequals","systemtables:1");
x.t("notequals","lessthan");
x.t("standard","guidewire");
x.t("standard","gosu");
x.t("loaded","database");
x.t("combine","unionrestriction");
x.t("combine","nonunionrestriction");
x.t("absence","value");
x.t("compound","restriction");
x.t("continue","original");
x.t("allows","create");
x.t("allows","define");
x.t("search","uses");
x.t("search","sets");
x.t("search","in-memory");
x.t("consistent","elements");
x.t("map","database");
x.t("appending","path");
x.t("address","postalcode");
x.t("final","rightmost");
x.t("restrictionbuilder.compareset","paths.make");
x.t("modifying","original");
x.t("local","uncommitted");
x.t("write","code");
x.t("fields","database");
x.t("fields","following");
x.t("sets","objects");
x.t("systemtables:1","//");
x.t("addition","standard");
x.t("relative","operators");
x.t("relative","operator");
x.t("(otherrestrictionbuilder)","important");
x.t("rb","restrictionbuilder.make");
x.t("systemtables:2","//");
x.t("in-memory","cache");
x.t("error","occurred");
x.t("queries","lower");
x.t("queries","based");
x.t("supported","customer");
x.t("equivalent","combining");
x.t("comparein","employeeids");
x.t("comparein","member");
x.t(".makequery",".select");
x.t("syntax","type");
x.t("syntax","feature");
x.t("usercontact","primaryaddress");
x.t("usercontact","publicid");
x.t("usercontact","employeenumber");
x.t("operators","four");
x.t("operators","equals");
x.t("operators","compare");
x.t("logical","operator");
x.t("appears","feature");
x.t("feature","type");
x.t("feature","property");
x.t("feature","literal");
x.t("feature","information");
x.t("feature","literals");
x.t("affects","output");
x.t("guidewire_selectall","var");
x.t("literal","syntax");
x.t("literal","match");
x.t("literal","previous");
x.t("side","literal");
x.t("presence","absence");
x.t("not-equals","greater");
x.t("number","rb.compare");
x.t("number","following");
x.t("function","guidewire_selectall");
x.t("length","method");
x.t("primaryaddress","appending");
x.t("implements","java.util.list");
x.t("implements","makequery");
x.t("combining","restriction");
x.t("combining","two");
x.t("person","firstname");
x.t("words","starting");
x.t("define","query");
x.t("combination","search");
x.t("represents","union");
x.t("represents","non-union");
x.t("cannot","compoundrestriction");
x.t("//add","restriction");
x.t("starting","element");
x.t("java.util.list","var");
x.t("instead","restrictionbuilder");
x.t("reloprestriction","relative");
x.t("reloprestriction","subclass");
x.t("publicid","no");
x.t("publicid","notequals");
x.t("publicid","equals");
x.t("changes","create");
x.t("changes","query");
x.t("changes","using");
x.t("match","right");
x.t("implementing","class");
x.t("rightmost","property");
x.t("internal","object");
x.t("admin","data");
x.t("owning","type");
x.t("works","property");
x.t("calling","new");
x.t("capability","combine");
x.t("important","unlike");
x.t("reference","property");
x.t("reference","consists");
x.t("reference","guide");
x.t("reference","type-safe");
x.t("reference","gosu");
x.t("reference","order");
x.t("code","independently");
x.t("code","create");
x.t("code","combines");
x.t("code","searches");
x.t("code","main");
x.t("code","additionally");
x.t("end","path");
x.t("comparenotin","specified");
x.t("paths.make","user");
x.t("abstract","method");
x.t("abstract","class");
x.t("lower","memory");
x.t("memory","repeated");
x.t("memory","usage");
x.t("database","declare");
x.t("database","local");
x.t("database","fields");
x.t("database","in-memory");
x.t("database","internal");
x.t("database","query");
x.t("previous","element");
x.t("given","query");
x.t("given","object");
x.t("together","operators");
x.t("setrestriction","subclass");
x.t("setrestriction","restrictions");
x.t("greater","less");
x.t("repeated","unions");
x.t("occurred","messsage");
x.t("less","reloprestriction");
x.t("less","chance");
x.t("path.append","address");
x.t("filterquery","(iselectquerybuilder)");
x.t("restrictionbuilder.union","(otherrestrictionbuilder)");
x.t("configuration","admin");
x.t("supplementary","query");
x.t("easier","create");
x.t("usage","faster");
x.t("predicate","however");
x.t("predicate","objects");
x.t("predicate","searches");
x.t("predicate","combination");
x.t("predicate","typical");
x.t("predicate","object");
x.t("uncommitted","changes");
x.t("value","possible");
x.t("value","path");
x.t("value","final");
x.t("value","end");
x.t("value","using");
x.t("main","restriction");
x.t("rb.compare","paths.make");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("res","myquery");
x.t("res","res.contact.publicid");
x.t("--","example");
x.t("--","done");
x.t("rb1.compare","paths.make");
x.t("builder","restriction");
x.t("builder","user");
x.t("builder","apis");
x.t("builder","equals");
x.t("builder","class");
x.t("builder","//");
x.t("builder","var");
x.t("programming","perspective");
x.t("making","path");
x.t("subtype","feature");
x.t("represent","persistent");
x.t("represent","items");
x.t("capable","filtering");
x.t("page","error");
x.t("separate","ordered");
x.t("output","sql");
x.t("query","restriction");
x.t("query","suited");
x.t("query","api");
x.t("query","directly");
x.t("query","test");
x.t("query","union");
x.t("query","searches");
x.t("query","code");
x.t("query","predicate");
x.t("query","builder");
x.t("query","compoundrestriction");
x.t("query","system");
x.t("internally","search");
x.t("information","feature");
x.t("firstnameprop","person");
x.t("postalcode","converting");
x.t("postalcode","path.getleafvalue");
x.t("typical","code");
x.t("data","check");
x.t("data","publicid");
x.t("result","evaluating");
x.t("result","path");
x.t("equals","100-01234");
x.t("equals","notequals");
x.t("equals","systemtables:1");
x.t("equals","systemtables:2");
x.t("equals","not-equals");
x.t("equals","operator");
x.t("union.create",".makequery");
x.t("gw.api.path.path","element");
x.t("path.getleafvalue","(user)");
x.t("(user)","rb2.compare");
x.t("(user)","//add");
x.t("(user)","rb1.compare");
x.t("(user)","two");
x.t("(user)","restrictions");
x.t("values","relop");
x.t("values","setrestriction");
x.t("values","equals");
x.t("employee","number");
x.t("myquery","rb.create");
x.t("myquery","union.create");
x.t("myquery","print");
x.t("firstname","paths");
x.t("called","predicate");
x.t("called","pass");
x.t("ordered","method");
x.t("described","following");
x.t("non-union","restriction");
x.t("non-union","restrictions");
x.t("employeenumber","notequals");
x.t("employeenumber","comparein");
x.t("employeenumber","equals");
x.t("print","beginning");
x.t("print","results");
x.t("print","res");
x.t("print","--");
x.t("billingcenter","apis");
x.t("billingcenter","offers");
x.t("chance","programmer");
x.t("two","restriction");
x.t("two","subclasses");
x.t("two","parts");
x.t("two","property");
x.t("two","classes");
x.t("two","nonunionrestriction");
x.t("two","restrictions");
x.t("perspective","path");
x.t("classes","directly");
x.t("topics","non-union");
x.t("done","loop");
x.t("gw.api.path.paths","class");
x.t("gw.api.path.paths","//");
x.t("path.aslist","leaf");
x.t("compoundrestriction","objects");
x.t("compoundrestriction","compound");
x.t("compoundrestriction","combine");
x.t("based","presence");
x.t("compareset","methods");
x.t("literals","example");
x.t("immediately","previous");
x.t("order","separate");
x.t("makequery","method");
x.t("makequery","calling");
x.t("operate","value");
x.t("subclass","pathrestriction");
x.t("call","method");
x.t("real","admin");
x.t("offers","supplementary");
x.t("either","query");
x.t("used","internally");
x.t("elements","supplementary");
x.t("system","create");
x.t("system","property");
x.t("relevant","implementing");
x.t("signatures","support");
x.t("following","example");
x.t("following","restriction");
x.t("following","//rb.compare");
x.t("following","topics");
x.t("restrictionbuilder.make","(user)");
x.t("gw.api.restriction.restrictionbuilder","uses");
x.t("entity","type");
x.t("additionally","restriction");
x.t("using","restriction");
x.t("using","getleafvalue");
x.t("using","default");
x.t("using","iterable");
x.t("using","relative");
x.t("using","compare");
x.t("class","static");
x.t("class","restrictionbuilder");
x.t("class","persistentpath");
x.t("class","simplerestrictionbuilder");
x.t("class","methods");
x.t("class","nonunionrestriction");
x.t("nonunionrestriction","restriction");
x.t("nonunionrestriction","unionrestriction");
x.t("nonunionrestriction","pathrestriction");
x.t("nonunionrestriction","objects");
x.t("nonunionrestriction","implements");
x.t("nonunionrestriction","object");
x.t("restrictionbuilder.compare","paths.make");
x.t("lessthan","greaterthan");
x.t("//","create");
x.t("//","simple");
x.t("//","union");
x.t("//","print");
x.t("//","real");
x.t("res.contact.publicid","print");
x.t("pass","built-in");
x.t("pass","property");
x.t("pass","constructor");
x.t("compare","method");
x.t("compare","membership");
x.t("compare","result");
x.t("compare","values");
x.t("compare","compareset");
x.t("returns","new");
x.t("paths","restriction");
x.t("paths","path");
x.t("paths","length");
x.t("paths","restrictions");
x.t("append","method");
x.t("append","property");
x.t("operator","studio");
x.t("operator","relop");
x.t("operator","union");
x.t("operator","restrictions");
x.t("member","comparein");
x.t("member","comparenotin");
x.t("unions","form");
x.t("sql","query");
x.t("var","pathaslist");
x.t("var","restrictionbuilder");
x.t("var","path");
x.t("var","union");
x.t("var","text_val=eval");
x.t("var","rb");
x.t("var","firstnameprop");
x.t("var","postalcode");
x.t("var","myquery");
x.t("var","rb1");
x.t("var","rb2");
x.t("restrictions","example");
x.t("restrictions","restriction");
x.t("restrictions","unionrestriction");
x.t("restrictions","create");
x.t("restrictions","filter");
x.t("restrictions","operate");
x.t("restrictions","nonunionrestriction");
x.t("restrictions","compare");
x.t("restrictions","restrictions");
x.t("restrictions","var");
x.t("rb1","restrictionbuilder.make");
x.t("builders","create");
x.t("builders","property");
x.t("builders","union");
x.t("builders","function");
x.t("builders","billingcenter");
x.t("builders","paths");
x.t(".select","//");
x.t("rb2","restrictionbuilder.make");
x.t("object","construct");
x.t("object","restriction");
x.t("object","rather");
x.t("object","type");
x.t("object","however");
x.t("object","list");
x.t("object","path");
x.t("object","allows");
x.t("object","given");
x.t("object","predicate");
x.t("object","called");
x.t("object","nonunionrestriction");
x.t("object","pass");
x.t("contains","persistent");
}
