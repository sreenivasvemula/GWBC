function FileData_Pairs(x)
{
x.t("example","code");
x.t("construct","super");
x.t("shares","work");
x.t("implement","calls");
x.t("implement","constructor");
x.t("implement","multi-threaded");
x.t("integration","guide");
x.t("integration","topics");
x.t("create","custom");
x.t("table","work");
x.t("workers","operates");
x.t("workers","work");
x.t("workers","operate");
x.t("required","methods");
x.t("derived","workqueuebase");
x.t("text_val.select","link");
x.t("batch","processing");
x.t("batch","process");
x.t("batch","returns");
x.t("type","declares");
x.t("type","writer");
x.t("type","target");
x.t("type","activtiy");
x.t("type","ready");
x.t("type","work");
x.t("type","following");
x.t("type","class");
x.t("operates","single");
x.t("calls","constructor");
x.t("associates","custom");
x.t("associates","work");
x.t("associates","class");
x.t("queue","shares");
x.t("queue","table");
x.t("queue","type");
x.t("queue","associates");
x.t("queue","possibly");
x.t("queue","overriding");
x.t("queue","activity");
x.t("queue","calling");
x.t("queue","derive");
x.t("queue","following");
x.t("queue","class");
x.t("queue","item");
x.t("queue","standardworkitem");
x.t("link","directly");
x.t("single","unit");
x.t("certain","circumstances");
x.t("items","work");
x.t("messsage","billingcenter");
x.t("typecode","custom");
x.t("typecode","batchprocesstype");
x.t("typecode","myworkqueue");
x.t("guide","integration");
x.t("iterator","result");
x.t("selects","units");
x.t("units","work");
x.t("directly","page");
x.t("queues","derived");
x.t("queues","creating");
x.t("queues","code");
x.t("circumstances","generally");
x.t("creating","custom");
x.t("text_val.focus","text_val.select");
x.t("possibly","create");
x.t("processworkitem","logic");
x.t("processworkitem","warning");
x.t("constructor","implement");
x.t("constructor","associates");
x.t("constructor","custom");
x.t("constructor","workqueuebase");
x.t("typekey.batchprocesstype.tc_myworkqueue","standardworkitem");
x.t("custom","batch");
x.t("custom","work");
x.t("base","class");
x.t("declares","custom");
x.t("declares","standardworkitem");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","findtargets");
x.t("methods","override");
x.t("provides","methods");
x.t("writer","workers");
x.t("writer","selects");
x.t("writer","workqueuebase");
x.t("overriding","two");
x.t("develop","successful");
x.t("target","type");
x.t("target","unit");
x.t("developing","custom");
x.t("selected","writer");
x.t("activtiy","target");
x.t("error","occurred");
x.t("logic","workers");
x.t("logic","writer");
x.t("findtargets","processworkitem");
x.t("findtargets","logic");
x.t("unit","works");
x.t("unit","work");
x.t("guidewire_selectall","var");
x.t("processing","developing");
x.t("activity","instances");
x.t("activity","include");
x.t("activity","entity");
x.t("activity","standardworkitem");
x.t("function","guidewire_selectall");
x.t("define","typecode");
x.t("types","unit");
x.t("works","work");
x.t("calling","super");
x.t("derive","work");
x.t("derive","class");
x.t("workqueuebase","base");
x.t("workqueuebase","provides");
x.t("workqueuebase","activity");
x.t("workqueuebase","work");
x.t("workqueuebase","class");
x.t("workqueuebase","generally");
x.t("code","associates");
x.t("code","constructor");
x.t("code","declares");
x.t("override","certain");
x.t("override","following");
x.t("ready","create");
x.t("occurred","messsage");
x.t("batchprocesstype","typelist");
x.t("include","code");
x.t("include","extends");
x.t("instances","construct");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("declaration","custom");
x.t("declaration","declaration");
x.t("declaration","specify");
x.t("programming","custom");
x.t("programming","logic");
x.t("extends","workqueuebase");
x.t("extends","clause");
x.t("process","typecode");
x.t("template","class");
x.t("page","error");
x.t("myworkqueue","code");
x.t("myworkqueue","extends");
x.t("result","processworkitem");
x.t("successful","custom");
x.t("runtime","batch");
x.t("runtime","typecode");
x.t("billingcenter","integration");
x.t("topics","custom");
x.t("two","required");
x.t("two","methods");
x.t("work","batch");
x.t("work","type");
x.t("work","queue");
x.t("work","items");
x.t("work","queues");
x.t("work","selected");
x.t("work","item");
x.t("operate","activity");
x.t("following","example");
x.t("following","two");
x.t("multi-threaded","programming");
x.t("clause","derive");
x.t("entity","type");
x.t("entity","types");
x.t("class","creating");
x.t("class","constructor");
x.t("class","function");
x.t("class","define");
x.t("class","workqueuebase");
x.t("class","include");
x.t("class","declaration");
x.t("class","template");
x.t("class","myworkqueue");
x.t("class","runtime");
x.t("class","class");
x.t("class","contains");
x.t("warning","implement");
x.t("typelist","work");
x.t("returns","iterator");
x.t("var","text_val=eval");
x.t("item","type");
x.t("contains","programming");
x.t("generally","develop");
x.t("generally","override");
x.t("specify","entity");
x.t("standardworkitem","activity");
x.t("standardworkitem","work");
x.t("standardworkitem","entity");
x.t("super","typekey.batchprocesstype.tc_myworkqueue");
x.t("super","class");
}
