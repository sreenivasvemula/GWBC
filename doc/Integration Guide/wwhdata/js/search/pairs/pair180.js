function FileData_Pairs(x)
{
x.t("example","expect");
x.t("example","implementation");
x.t("example","runwithnewbundle");
x.t("method","plugin");
x.t("method","reads");
x.t("method","takes");
x.t("method","appropriate");
x.t("method","call");
x.t("method","server");
x.t("parameter","start");
x.t("else","_callback.logstop");
x.t("else","_state");
x.t("else","_callback.logstart");
x.t("else","_callback.state");
x.t("version","startable");
x.t("ever","database");
x.t("ever","run");
x.t("rare","situations");
x.t("annotation","startable");
x.t("implement","getting");
x.t("implement","trivial");
x.t("saved","state");
x.t("integration","guide");
x.t("create","thread");
x.t("create","bundle");
x.t("_callback","handler");
x.t("_callback","startableplugincallbackhandler");
x.t("_callback","null");
x.t("keep","state");
x.t("callback","handler");
x.t("instance","startableplugincallbackhandler");
x.t("always","run");
x.t("arguments","represents");
x.t("gw.api.startable.istartableplugin","uses");
x.t("void","_callback");
x.t("void","_thread");
x.t("plugin","method");
x.t("plugin","ever");
x.t("plugin","saved");
x.t("plugin","callback");
x.t("plugin","always");
x.t("plugin","state");
x.t("plugin","start");
x.t("plugin","name");
x.t("plugin","instead");
x.t("plugin","starting");
x.t("plugin","running");
x.t("plugin","implementation");
x.t("plugin","runs");
x.t("plugin","save");
x.t("plugin","stopping");
x.t("plugin","distributed");
x.t("user","interface");
x.t("situations","expect");
x.t("try","transaction.runwithnewbundle");
x.t("java.lang.exception","trycount");
x.t("later","state");
x.t("line","log");
x.t("uses","gw.api.startable.istartableplugin");
x.t("uses","java.lang.thread");
x.t("uses","gw.api.startable.startableplugincallbackhandler");
x.t("uses","gw.api.util.logger");
x.t("uses","gw.transaction.transaction");
x.t("uses","gw.api.startable.startablepluginstate");
x.t("(stopped)","_state");
x.t("(stopped)","//");
x.t("text_val.select","link");
x.t("state","ever");
x.t("state","necessary");
x.t("state","want");
x.t("state","appropriately");
x.t("state","according");
x.t("state","consistent");
x.t("state","started");
x.t("state","sets");
x.t("state","startablepluginstate");
x.t("state","may");
x.t("state","persist");
x.t("state","database");
x.t("state","helloworlddistributedstartableplugin:started");
x.t("state","already");
x.t("state","information");
x.t("state","package");
x.t("state","helloworlddistributedstartableplugin:stopped");
x.t("interface","apis");
x.t("respects","request");
x.t("administrator","api");
x.t("necessary","_callback.logstop");
x.t("necessary","_callback.logstart");
x.t("necessary","exceptions");
x.t("batch","server");
x.t("change","example");
x.t("change","started");
x.t("times","want");
x.t("calls","plugin");
x.t("time","query");
x.t("time","history");
x.t("however","configure");
x.t("however","startable");
x.t("down","plugin");
x.t("down","value");
x.t("trigger","start");
x.t("default","cluster");
x.t("default","assumption");
x.t("default","stopped");
x.t("guidewire","strongly");
x.t("automatically","persisted");
x.t("automatically","series");
x.t("apis","application");
x.t("original","changed");
x.t("needed","getstate");
x.t("gw.api.startableplugin","uses");
x.t("property","state");
x.t("servers","state");
x.t("servers","default");
x.t("servers","configuring");
x.t("servers","started");
x.t("servers","function");
x.t("servers","cluster");
x.t("servers","happens");
x.t("link","directly");
x.t("start","method");
x.t("start","stop");
x.t("start","handler");
x.t("start","pass");
x.t("start","var");
x.t("getting","setting");
x.t("want","change");
x.t("want","different");
x.t("==","started");
x.t("new","thread");
x.t("_callback.logstop","helloworlddistributedstartableplugin");
x.t("_callback.logstop","helloworlddistributedstartableplugin:started");
x.t("_callback.logstop","helloworlddistributedstartableplugin:stopped");
x.t("t.daemon=true","override");
x.t("messsage","billingcenter");
x.t("status","started");
x.t("status","database");
x.t("appropriately","later");
x.t("proper","setting");
x.t("again","_state");
x.t("add","@distributed");
x.t("recommends","startable");
x.t("expect","administrator");
x.t("expect","startable");
x.t("guide","plugins");
x.t("api","trigger");
x.t("api","logstart");
x.t("according","getstate");
x.t("configuring","startable");
x.t("false","stopped");
x.t("_thread.stop","_startedhowmanytimes");
x.t("_thread.stop","_thread");
x.t("serverstopping","boolean");
x.t("directly","page");
x.t("declare","plugin");
x.t("true","plugin");
x.t("true","started");
x.t("true","startable");
x.t("detects","condition");
x.t("java.lang.thread","uses");
x.t("_state","==");
x.t("_state","_callback.getstate");
x.t("_state","started");
x.t("_state","startablepluginstate");
x.t("_state","override");
x.t("_state","stopped");
x.t("text_val.focus","text_val.select");
x.t("getstate","method");
x.t("getstate","ignores");
x.t("getstate","gets");
x.t("name","state");
x.t("follows","server");
x.t("stop","method");
x.t("stop","user");
x.t("stop","serverstopping");
x.t("stop","methods");
x.t("stop","starting");
x.t("changed","server");
x.t("handler","(serverstartup)");
x.t("handler","startableplugincallbackhandler");
x.t("handler","object");
x.t("existed","reason");
x.t("handles","request");
x.t("handles","edge");
x.t("argument","line");
x.t("argument","start");
x.t("argument","true");
x.t("argument","stop");
x.t("argument","setstate");
x.t("trivial","thread");
x.t("_callback.getstate","(stopped)");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","implement");
x.t("methods","object");
x.t("boolean","void");
x.t("up","value");
x.t("up","read");
x.t("consistent","across");
x.t("attempts","information");
x.t("writes","line");
x.t("started","keep");
x.t("started","_callback.logstop");
x.t("started","false");
x.t("started","changestate");
x.t("started","instead");
x.t("started","_callback.logstart");
x.t("started","stopped");
x.t("started","_callback.state");
x.t("started","_thread");
x.t("started","startable");
x.t("sets","state");
x.t("sets","database");
x.t("local","state");
x.t("string","include");
x.t("changestate","(stopped)");
x.t("changestate","newstate");
x.t("changestate","(started)");
x.t("attempt","trycount");
x.t("second","argument");
x.t("thread","start");
x.t("thread","proper");
x.t("thread","function");
x.t("thread","override");
x.t("thread","already");
x.t("request","calls");
x.t("request","however");
x.t("request","attempts");
x.t("request","startable");
x.t("error","occurred");
x.t("strongly","recommends");
x.t("late","servers");
x.t("respect","request");
x.t("consistently","save");
x.t("clearly","consistently");
x.t("bother","distributed");
x.t("first","time");
x.t("helloworlddistributedstartableplugin","_state");
x.t("helloworlddistributedstartableplugin","implements");
x.t("helloworlddistributedstartableplugin","//");
x.t("reason","briefly");
x.t("trycount","try");
x.t("trycount","_callback.state");
x.t("trycount","_callback.log");
x.t("trycount","caught");
x.t("guidewire_selectall","var");
x.t("stops","local");
x.t("briefly","stop");
x.t("function","start");
x.t("function","stop");
x.t("function","sets");
x.t("function","changestate");
x.t("function","guidewire_selectall");
x.t("function","run");
x.t("cluster","late");
x.t("cluster","approach");
x.t("cluster","combination");
x.t("cluster","declaring");
x.t("cluster","decides");
x.t("cluster","startable");
x.t("cluster","server");
x.t("approach","handles");
x.t("implements","istartableplugin");
x.t("startablepluginstate","return");
x.t("startablepluginstate","var");
x.t("reads","second");
x.t("reads","database");
x.t("may","changes");
x.t("whether","appropriate");
x.t("different","batch");
x.t("different","behavior");
x.t("private","function");
x.t("private","variable");
x.t("combination","state");
x.t("represents","default");
x.t("(serverstartup)","//");
x.t(".name","e.message");
x.t("starting","method");
x.t("starting","again");
x.t("starting","up");
x.t("instead","_state");
x.t("instead","server");
x.t("logstart","writes");
x.t("gw.api.startable.startableplugincallbackhandler","uses");
x.t("user.util.unrestricteduser","catch");
x.t("declaring","startable");
x.t("changes","server");
x.t("internal","function");
x.t("persist","database");
x.t("simply","stops");
x.t("expected","value");
x.t("_callback.logstart","helloworlddistributedstartableplugin");
x.t("_callback.logstart","helloworlddistributedstartableplugin:started");
x.t("_callback.logstart","helloworlddistributedstartableplugin:stopped");
x.t("steps","follows");
x.t("startableplugincallbackhandler","serverstartup");
x.t("startableplugincallbackhandler","var");
x.t("startableplugincallbackhandler","object");
x.t("override","property");
x.t("override","function");
x.t("return","_state");
x.t("database","method");
x.t("database","implement");
x.t("database","state");
x.t("database","automatically");
x.t("database","default");
x.t("database","status");
x.t("database","true");
x.t("database","getstate");
x.t("database","expected");
x.t("database","value");
x.t("database","using");
x.t("database","even");
x.t("database","startable");
x.t("variable","call");
x.t("bundle","change");
x.t("bundle","newstate");
x.t("bundle","_callback.setstate");
x.t("istartableplugin","var");
x.t("serverstartup","boolean");
x.t("occurred","messsage");
x.t("stopped","state");
x.t("stopped","changestate");
x.t("stopped","first");
x.t("stopped","//");
x.t("stopped","across");
x.t("stopped","server");
x.t("assumption","first");
x.t("null","else");
x.t("null","_callback");
x.t("null","_thread.stop");
x.t("null","(serverstopping)");
x.t("tries","times");
x.t("typeof",".name");
x.t("include","plugin");
x.t("gw.api.util.logger","@distributed");
x.t("value","state");
x.t("value","true");
x.t("value","started");
x.t("value","database");
x.t("value","stopped");
x.t("value","startable");
x.t("running","version");
x.t("running","request");
x.t("helloworlddistributedstartableplugin:started","else");
x.t("helloworlddistributedstartableplugin:started","logstop");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("implementation","start");
x.t("implementation","detects");
x.t("implementation","tries");
x.t("implementation","class");
x.t("already","existed");
x.t("already","matching");
x.t("broadcast","servers");
x.t("broadcast","system");
x.t("condition","reads");
x.t("condition","simply");
x.t("shuts","down");
x.t("_startedhowmanytimes","//");
x.t("_startedhowmanytimes","var");
x.t("newstate","trycount");
x.t("newstate","startablepluginstate");
x.t("newstate","user.util.unrestricteduser");
x.t("takes","arguments");
x.t("takes","argument");
x.t("runs","rare");
x.t("read","value");
x.t("hello","t.daemon=true");
x.t("(serverstopping)","_state");
x.t("page","error");
x.t("server-database","cluster");
x.t("setstate","sets");
x.t("setstate","careful");
x.t("configure","run");
x.t("joining","cluster");
x.t("information","servers");
x.t("information","database");
x.t("query","checked");
x.t("gw.transaction.transaction","uses");
x.t("this.intrinsictype.name","attempt");
x.t("save","state");
x.t("save","copy");
x.t("persisted","broadcast");
x.t("happens","automatically");
x.t("appropriate","respect");
x.t("appropriate","startable");
x.t("appropriate","server");
x.t("ignores","argument");
x.t("_thread","thread");
x.t("_thread","null");
x.t("_callback.state","started");
x.t("_callback.state","stopped");
x.t("_callback.state","newstate");
x.t("_callback.setstate","bundle");
x.t("application","propagates");
x.t("logstop","writes");
x.t("stopping","method");
x.t("decides","whether");
x.t("print","hello");
x.t("plugins","configuring");
x.t("plugins","clearly");
x.t("plugins","run");
x.t("plugins","startable");
x.t("billingcenter","integration");
x.t("history","startable");
x.t("cases","server");
x.t("copy","object");
x.t("immediately","calls");
x.t("call","internal");
x.t("call","setstate");
x.t("call","following");
x.t("package","gw.api.startableplugin");
x.t("(started)","//");
x.t("_callback.log","this.intrinsictype.name");
x.t("run","batch");
x.t("run","servers");
x.t("run","server-database");
x.t("run","print");
x.t("run","pass");
x.t("starts","plugin");
x.t("system","running");
x.t("following","example");
x.t("following","methods");
x.t("transaction.runwithnewbundle","bundle");
x.t("class","guidewire");
x.t("class","helloworlddistributedstartableplugin");
x.t("setting","state");
x.t("setting","startable");
x.t("using","plugin");
x.t("//","create");
x.t("//","plugin");
x.t("//","thread");
x.t("//","internal");
x.t("//","implementation");
x.t("//","call");
x.t("//","server");
x.t("distributed","batch");
x.t("distributed","original");
x.t("distributed","add");
x.t("distributed","declare");
x.t("distributed","broadcast");
x.t("distributed","server");
x.t("@distributed","annotation");
x.t("@distributed","class");
x.t("across","servers");
x.t("series","steps");
x.t("pass","value");
x.t("catch","java.lang.exception");
x.t("catch","exceptions");
x.t("behavior","different");
x.t("behavior","private");
x.t("caught","typeof");
x.t("var","_callback");
x.t("var","new");
x.t("var","_state");
x.t("var","text_val=eval");
x.t("var","trycount");
x.t("var","_startedhowmanytimes");
x.t("var","_thread");
x.t("edge","cases");
x.t("runwithnewbundle","api");
x.t("helloworlddistributedstartableplugin:stopped","else");
x.t("helloworlddistributedstartableplugin:stopped","_callback");
x.t("helloworlddistributedstartableplugin:stopped","following");
x.t("startable","plugin");
x.t("startable","plugins");
x.t("even","state");
x.t("propagates","information");
x.t("shutting","down");
x.t("careful","catch");
x.t("exceptions","create");
x.t("exceptions","//");
x.t("log","plugin");
x.t("log","string");
x.t("gw.api.startable.startablepluginstate","uses");
x.t("server","respects");
x.t("server","state");
x.t("server","batch");
x.t("server","however");
x.t("server","start");
x.t("server","handles");
x.t("server","bother");
x.t("server","cluster");
x.t("server","starting");
x.t("server","shuts");
x.t("server","joining");
x.t("server","immediately");
x.t("server","starts");
x.t("server","behavior");
x.t("server","shutting");
x.t("server","server");
x.t("object","parameter");
x.t("object","instance");
x.t("object","needed");
x.t("object","private");
x.t("gets","state");
x.t("checked","example");
x.t("matching","database");
}
