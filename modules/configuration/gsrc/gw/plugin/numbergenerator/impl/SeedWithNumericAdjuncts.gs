package gw.plugin.numbergenerator.impl
uses java.util.concurrent.locks.ReentrantLock
uses java.text.NumberFormat
uses java.lang.Integer

/**
 * Alternate method of generating numbers.  Used when default number generation method is too expensive.
 * The default number generation method is what is used when not using this class.
 * The default number generation method requires an update to a database row - which holds a lock on that row.
 * This can become expensive when multiple threads are generating numbers using the default method,
 * creating contention for the lock and causing threads to idle while waiting for the lock.
 * 
 * Generates numbers consisting of a seed and an adjunct.
 * Requires a block that, when invoked, generates a new seed.
 * In practice, this block returns the number generated by the default number generation method.
 * The adjunct is a number from 0 thru <code>greatestAdjuctInt</code> inclusive.
 * The number generated is seed + hyphen + adjunct.
 * The hyphen is used to help with debugging problems - it assists in visually separating the seed and adjunct.
 * The adjunct is always the same length of characters as <code>greatestAdjunctInt</code>.
 * If <code>greatestAdjunctInt</code> is 9, then the adjuncts are 0 thru 9 inclusive.
 * If <code>greatestAdjunctInt</code> is 99, then the adjuncts are 00 thru 99 inclusive.
 * If <code>greatestAdjunctInt</code> is 999, then the adjuncts are 000 thru 999 inclusive.
 * This is done to keep the length of the generated numbers stable.
 * The generated numbers length is not guaranteed to be constant as the seed may change length.
 * This is also true of the default number generation method.
 * 
 * A new seed is retrieved when the first number is generated for a given instance of <code>SeedWithNumericAdjuncts</code>.
 * The first number generated will use an adjunct of 0.
 * Each time a number is generated, the next higher adjunct is used unless that most recent adjunct used is equal to <code>greatestAdjunctInt</code>.
 * When the last adjunct used is equal to <code>greatestAdjunctInt</code>, then a new seed is retrieved and an adjunct of 0 is used.
 * In practice, retrieving a new seed consists of a database query.
 * 
 * This class can be modified to remove the hyphen or change the hyphen to a different character.
 * This class can be modified to use alpha or alpha-numeric adjuncts.
 */
@Export
class SeedWithNumericAdjuncts {

  // Each app server will have a different seed.
  // This lock is used to ensure that the seed and adjuncts are changed atomically.
  private final var lock = new ReentrantLock();

  // Set in the constructor then never changed.
  private var greatestAdjunct : int

  // Set in the constructor then never changed.
  private var nextSeed : block():String
  
  // The most recent adjunct used to generate a number.  See GosuDoc for details.
  private var lastAdjunct : int

  // A new seed is retrieved when the first number is generated for a given instance of <code>SeedWithNumericAdjuncts</code>.
  // This is what used to be the generated number, but now we use it as a seed for generating a larger number.
  private var seed : String
  
  // Ensures that adjuncts are properly converted to string format - padded with zeros and without commas.
  private var formatter : NumberFormat

  /**
   * @param greatestAdjunctInt The largest adjunct that will be used when generating numbers.
   * @param nextSeedBlock The block that will be executed to retrieve new seeds.
   */
  construct(greatestAdjunctInt : int, nextSeedBlock : block():String) {
    greatestAdjunct = greatestAdjunctInt
    // ensures that we'll get a new seed with the first invocation of nextNumber()
    // this is done instead of checking for a null seed so that we can do less while locked
    lastAdjunct = greatestAdjunct
    nextSeed = nextSeedBlock
    formatter = NumberFormat.getInstance()
    // pad with zeros
    formatter.setMinimumIntegerDigits(Integer.toString(greatestAdjunct).length)
    // don't use commas
    formatter.setGroupingUsed(false)
  }

  /**
   * Generates a number.
   */  
  function nextNumber() : String {
    // method-local variables concatenated together outside the lock
    var thisSeed : String
    var thisAdjunct : String

    // lock so that seed and lastAdjunct are modified atomically
    lock.with(\ -> {
      // see if we've used the greatest adjunct or if this is the first number we're generating.
      if (lastAdjunct >= greatestAdjunct) {
        // get the next seed (what used to be the number generated) then concatenate a hyphen
        // concatenation is done once here so it won't be done many times later
        seed = nextSeed() + "-"
        // start using new seed with the first adjunct
        lastAdjunct = 0
      } else {
        lastAdjunct = lastAdjunct + 1
      }
      thisSeed = seed
      // NumberFormat.format() is not thread-safe, that's why this is done within the lock.
      thisAdjunct = formatter.format(lastAdjunct)
    })
    
    // concatenate outside the lock to keep the lock's scope small.
    return thisSeed + thisAdjunct;
  }
}
