<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <Page
    afterCancel="Accounts.go()"
    afterCommit="AccountDetailSummary.go(account)"
    beforeCommit="gw.api.web.account.AccountUtil.validateAccountContacts(account)"
    beforeValidate="processAccountBeforeValidate()"
    canEdit="true"
    canVisit="perm.Account.create"
    id="NewAccount"
    parent="AccountsGroup()"
    showUpLink="true"
    startInEditMode="true"
    title="displaykey.Web.NewAccount.Title">
    <LocationEntryPoint
      signature="NewAccount(currency : Currency)"/>
    <Variable
      initialValue="createNewAccount()"
      name="account"
      type="Account"/>
    <Variable
      initialValue="gw.api.database.Query.make(SecurityZone).select()"
      name="allSecurityZones"
      type="SecurityZoneQuery"/>
    <Variable
      initialValue="true"
      name="inputGroup"/>
    <Variable
      initialValue="com.google.common.collect.Lists.newArrayList&lt;PaymentPlan&gt;()"
      name="listBillPaymentPlans"
      type="List&lt;PaymentPlan&gt;"/>
    <Variable
      initialValue="com.google.common.collect.Lists.newArrayList&lt;InvoiceStream&gt;()"
      name="listBillInvoiceStreams"
      type="List&lt;InvoiceStream&gt;"/>
    <Variable
      initialValue="new gw.payment.PaymentInstrumentRange(account.PaymentInstruments)"
      name="paymentInstrumentRange"
      type="gw.payment.PaymentInstrumentRange"/>
    <Variable
      name="currency"
      type="Currency"/>
    <Variable
      initialValue="account.BillingLevel == BillingLevel.TC_ACCOUNT"
      name="invoiceBy"/>
    <Variable
      initialValue="account.BillingLevel != BillingLevel.TC_POLICYDESIGNATEDUNAPPLIED"
      name="separateIncomingFundsBy"/>
    <Variable
      initialValue="PaymentAllocationPlan.finder.findAllAvailablePlans(PaymentAllocationPlan)"
      name="availablePaymentAllocationPlans"/>
    <Screen
      id="NewAccountScreen">
      <Variable
        initialValue="new web.account.AccountSearchConverter()"
        name="accountSearchConverter"
        type="web.account.AccountSearchConverter"/>
      <Toolbar>
        <EditButtons
          updateLabel="displaykey.Web.NewAccount.CreateAccount"/>
      </Toolbar>
      <DetailViewPanel
        id="NewAccountDV">
        <InputColumn>
          <Label
            label="displaykey.Web.NewAccountDV.AccountInfo"/>
          <Input
            editable="true"
            id="AccountNumber"
            label="displaykey.Web.NewAccountDV.AccountNumber"
            required="true"
            value="account.AccountNumber"/>
          <Input
            editable="true"
            id="AccountName"
            label="(gw.api.util.LocaleUtil.CurrentLocaleType == LocaleType.TC_JA_JP) ? displaykey.Web.NewAccountDV.AccountNamePhonetic : displaykey.Web.NewAccountDV.AccountName"
            required="true"
            value="account.AccountName"/>
          <Input
            editable="true"
            id="AccountNameKanji"
            label="displaykey.Web.NewAccountDV.AccountName"
            required="false"
            value="account.AccountNameKanji"
            visible="gw.api.util.LocaleUtil.CurrentLocaleType == LocaleType.TC_JA_JP"/>
          <Input
            editable="true"
            id="ParentAccount"
            inputConversion="accountSearchConverter.getAccount(VALUE)"
            label="displaykey.Web.NewAccountDV.ParentAccount"
            required="false"
            validationExpression="account.hasValidParentAccount() ? null : displaykey.Web.AccountDetailDV.ParentNotValid"
            value="account.ParentAccount">
            <MenuItem
              action="AccountSearchPopup.push()"
              icon="&quot;search.png&quot;"
              id="AccountPicker"/>
          </Input>
          <TextInput
            id="Currency"
            label="displaykey.Web.NewAccountDV.Currency"
            value="account.Currency"/>
          <TypeKeyInput
            editable="true"
            id="AccountTypeInput"
            label="displaykey.Web.NewAccountDV.AccountType"
            required="true"
            validationExpression="account.checkForListBillErrors()"
            value="account.AccountType">
            <PostOnChange
              onChange="if(account.isListBill()){account.BillingLevel = BillingLevel.TC_ACCOUNT}"/>
          </TypeKeyInput>
          <TypeKeyInput
            editable="true"
            id="CustomerServiceTier"
            label="displaykey.Web.NewAccountDV.CustomerServiceTier"
            value="account.ServiceTier"/>
          <RangeInput
            editable="true"
            id="SecurityZone"
            label="displaykey.Web.AccountDetailDV.SecurityZone"
            value="account.SecurityZone"
            valueRange="allSecurityZones"/>
          <Input
            editable="true"
            id="DBA"
            label="displaykey.Web.NewAccountDV.DBA"
            value="account.DBA"/>
          <TypeKeyInput
            editable="true"
            id="Segment"
            label="displaykey.Web.NewAccountDV.Segment"
            value="account.Segment"/>
          <RangeInput
            editable="true"
            id="BillingPlan"
            label="displaykey.Web.NewAccountDV.BillingPlan"
            required="true"
            value="account.BillingPlan"
            valueRange="Plan.finder.findAllAvailablePlans(BillingPlan, account.Currency)">
            <PostOnChange/>
          </RangeInput>
          <RangeInput
            editable="true"
            id="DelinquencyPlan"
            label="displaykey.Web.NewAccountDV.DelinquencyPlan"
            required="true"
            value="account.DelinquencyPlan"
            valueRange="account.getApplicableDelinquencyPlans()"/>
          <RangeInput
            editable="availablePaymentAllocationPlans.Count &gt; 1"
            id="PaymentAllocationPlan"
            label="displaykey.Web.NewAccountDV.PaymentAllocationPlan"
            required="true"
            value="account.PaymentAllocationPlan"
            valueRange="availablePaymentAllocationPlans"/>
          <TypeKeyRadioInput
            editable="true"
            id="FixDueDate"
            label="displaykey.Web.NewAccountDV.FixDayOfMonth"
            required="true"
            value="account.BillDateOrDueDateBilling"/>
          <InputGroup
            childrenVisible="inputGroup"
            id="InvoicesFixedOnInputGroup"
            label="displaykey.Web.AccountDetailDV.InvoicesFixedOn">
            <Input
              editable="true"
              id="InvoiceDayOfMonth"
              label="displaykey.Web.NewAccountDV.InvoiceDayOfMonth"
              required="true"
              validationExpression="account.InvoiceDayOfMonth != null and account.InvoiceDayOfMonth &gt; 0 and account.InvoiceDayOfMonth &lt;= 31 ? null : displaykey.Java.Account.InvoiceDayOfMonth.ValidationError"
              value="account.InvoiceDayOfMonth"/>
            <Input
              editable="true"
              id="FirstTwicePerMonthInvoiceDayOfMonth"
              label="displaykey.Web.NewAccountDV.FirstTwicePerMonthInvoiceDayOfMonth"
              required="true"
              validationExpression="account.FirstTwicePerMonthInvoiceDayOfMonth != null and account.FirstTwicePerMonthInvoiceDayOfMonth &gt; 0 and account.FirstTwicePerMonthInvoiceDayOfMonth &lt;= 31 ? null : displaykey.Java.Account.InvoiceDayOfMonth.ValidationError"
              value="account.FirstTwicePerMonthInvoiceDayOfMonth"/>
            <Input
              editable="true"
              id="SecondTwicePerMonthInvoiceDayOfMonth"
              label="displaykey.Web.NewAccountDV.SecondTwicePerMonthInvoiceDayOfMonth"
              required="true"
              validationExpression="account.SecondTwicePerMonthInvoiceDayOfMonth != null and account.SecondTwicePerMonthInvoiceDayOfMonth &gt; 0 and account.SecondTwicePerMonthInvoiceDayOfMonth &lt;= 31 ? null : displaykey.Java.Account.InvoiceDayOfMonth.ValidationError"
              value="account.SecondTwicePerMonthInvoiceDayOfMonth"/>
            <TypeKeyInput
              editable="true"
              id="InvoiceDayOfWeek"
              label="displaykey.Web.NewAccountDV.InvoiceDayOfWeek"
              value="account.InvoiceDayOfWeek"/>
            <DateInput
              editable="true"
              id="EveryOtherWeekInvoiceAnchorDate"
              label="displaykey.Web.NewAccountDV.EveryOtherWeekInvoiceAnchorDate"
              required="true"
              value="account.EveryOtherWeekInvoiceAnchorDate"/>
          </InputGroup>
          <TypeKeyInput
            editable="true"
            id="SendInvoicesBy"
            label="displaykey.Web.NewAccountDV.SendInvoicesBy"
            required="true"
            value="account.InvoiceDeliveryType"/>
          <BooleanRadioInput
            editable="true"
            falseLabel="displaykey.Web.AccountDetailDV.Billing.PolicyGroup"
            id="BillingLevelInvoiceByAccount"
            label="displaykey.Web.AccountDetailDV.Billing.InvoiceBy"
            required="true"
            trueLabel="displaykey.Web.AccountDetailDV.Billing.Account"
            value="invoiceBy"
            visible="!account.isListBill()">
            <PostOnChange
              onChange="updateBillingLevel()"/>
          </BooleanRadioInput>
          <BooleanRadioInput
            editable="not invoiceBy"
            falseLabel="displaykey.Web.AccountDetailDV.Billing.PolicyGroup"
            id="BillingLevelSeparateIncomingFundsByAccount"
            label="displaykey.Web.AccountDetailDV.Billing.SeparateIncomingFundsBy"
            required="true"
            trueLabel="displaykey.Web.AccountDetailDV.Billing.Account"
            value="separateIncomingFundsBy"
            visible="!account.isListBill()">
            <PostOnChange
              onChange="updateBillingLevel()"/>
          </BooleanRadioInput>
          <RangeInput
            editable="true"
            id="PaymentInstrument"
            label="displaykey.Web.NewAccountDV.PaymentInstrument"
            onPick="paymentInstrumentRange.addPaymentInstrument(account.DefaultPaymentInstrument)"
            required="true"
            value="account.DefaultPaymentInstrument"
            valueRange="gw.payment.PaymentInstrumentFilters.applyFilter(paymentInstrumentRange, gw.payment.PaymentInstrumentFilters.accountDetailsPaymentInstrumentFilter)">
            <MenuItem
              action="NewPaymentInstrumentPopup.push(gw.payment.PaymentInstrumentFilters.accountDetailsPaymentInstrumentOptions,account,false)"
              id="CreateNewPaymentInstrument"
              label="displaykey.Web.NewPaymentInstrument.CreateNewPaymentInstrument"/>
            <PostOnChange/>
          </RangeInput>
          <InputDivider/>
          <Label
            label="displaykey.Web.NewAccountDV.PrimaryContact"/>
          <Input
            id="PrimaryContactName"
            label="displaykey.Web.NewAccountDV.PrimaryContact.Name"
            value="account.Insured"/>
          <Input
            id="Address"
            label="displaykey.Web.NewAccountDV.PrimaryContact.Address"
            value="new gw.api.address.AddressFormatter().format(account.Insured.Contact.PrimaryAddress, &quot;\n&quot;)"/>
          <InputSetRef
            def="GlobalPhoneInputSet(new gw.api.phone.BusinessPhoneOwner(new gw.api.phone.ContactPhoneDelegate(account.Insured.Contact, Contact#WorkPhone), displaykey.Web.NewAccountDV.PrimaryContact.Phone))"
            editable="false"
            id="PrimaryContactPhone"/>
          <Input
            id="PrimaryContactEmail"
            label="displaykey.Web.NewAccountDV.PrimaryContact.Email"
            value="account.Insured.Contact.EmailAddress1"/>
          <Label
            label="displaykey.Web.NewAccountDV.CompanyType"/>
          <Input
            editable="true"
            id="OrganizationType"
            label="displaykey.Web.NewAccountDV.OrganizationType"
            value="account.OrganizationType"/>
          <Input
            editable="true"
            id="FEIN"
            label="displaykey.Web.NewAccountDV.FEIN"
            value="account.FEIN"/>
        </InputColumn>
        <InputFooterSection>
          <ListViewInput
            boldLabel="true"
            label="displaykey.Web.NewAccountDV.Contacts"
            labelAbove="true">
            <Toolbar>
              <ToolbarButton
                hideIfReadOnly="true"
                id="addNewContact"
                label="displaykey.Button.Add">
                <MenuItem
                  action="NewAccountContactPopup.push(account, Company)"
                  id="addNewCompany"
                  label="displaykey.Web.PolicyDetailContacts.AddNewCompany"/>
                <MenuItem
                  action="NewAccountContactPopup.push(account, Person)"
                  id="addNewPerson"
                  label="displaykey.Web.PolicyDetailContacts.AddNewPerson"/>
              </ToolbarButton>
              <IteratorButtons
                addVisible="false"
                iterator="NewAccountContactsLV"/>
              <PickerToolbarButton
                action="ContactSearchPopup.push(false)"
                available="true"
                hideIfReadOnly="true"
                id="addExistingContact"
                label="displaykey.Web.AccountDetailContacts.AddExistingContact"
                onPick="gw.contact.ContactConnection.connectContactToAccount(PickedValue, account)"/>
            </Toolbar>
            <ListViewPanel
              id="NewAccountContactsLV">
              <RowIterator
                editable="true"
                elementName="accountContact"
                id="accountContactIterator"
                toRemove="account.removeFromContacts(accountContact)"
                value="account.Contacts">
                <Row>
                  <LinkCell
                    id="Edit">
                    <Link
                      action="AccountContactDetailPopup.push(accountContact)"
                      hideIfReadOnly="true"
                      id="EditLink"
                      label="displaykey.Web.NewAccountContactsLV.Edit"
                      styleClass="miniButton"/>
                  </LinkCell>
                  <Cell
                    id="ContactName"
                    label="displaykey.Web.NewAccountContactsLV.Name"
                    value="accountContact"/>
                  <Cell
                    id="ContactAddress"
                    label="displaykey.Web.NewAccountContactsLV.Address"
                    value="accountContact.Contact.PrimaryAddress"/>
                  <Cell
                    id="ContactRoles"
                    label="displaykey.Web.NewAccountContactsLV.Roles"
                    value="gw.api.web.account.AccountUtil.getRolesForDisplay(accountContact)"/>
                  <Cell
                    id="IsPrimaryPayer"
                    label="displaykey.Web.NewAccountContactsLV.IsPrimaryPayer"
                    value="accountContact.PrimaryPayer"/>
                </Row>
              </RowIterator>
            </ListViewPanel>
          </ListViewInput>
        </InputFooterSection>
      </DetailViewPanel>
      <PanelDivider
        visible="account.isListBill()"/>
      <DetailViewPanel
        visible="account.isListBill()">
        <InputColumn>
          <ListViewInput
            boldLabel="true"
            editable="true"
            id="PaymentPlansListViewInput"
            label="displaykey.Web.NewAccountDV.PaymentPlans"
            labelAbove="true">
            <Toolbar>
              <AddButton
                id="addPaymentPlanButton"
                iterator="PaymentPlanRowIterator"
                label="displaykey.Button.Add"
                pickLocation="AccountAddPaymentPlanPopup.push()"/>
              <IteratorButtons
                addVisible="false"
                iterator="NewAccountPaymentPlansLV"/>
            </Toolbar>
            <ListViewPanel
              id="NewAccountPaymentPlansLV">
              <RowIterator
                editable="false"
                elementName="paymentPlan"
                id="PaymentPlanRowIterator"
                toAdd="listBillPaymentPlans.add(paymentPlan)"
                toRemove="listBillPaymentPlans.remove(paymentPlan)"
                value="listBillPaymentPlans">
                <Row>
                  <Cell
                    action="PaymentPlanDetail.go(paymentPlan)"
                    id="Name"
                    label="displaykey.Web.PaymentPlansLV.Name"
                    value="paymentPlan.Name_en_US"/>
                  <Cell
                    id="Description"
                    label="displaykey.Web.PaymentPlansLV.Description"
                    value="paymentPlan.Description"/>
                  <DateCell
                    id="EffectiveDate"
                    label="displaykey.Web.PaymentPlansLV.EffectiveDate"
                    value="paymentPlan.EffectiveDate"/>
                  <DateCell
                    id="ExpirationDate"
                    label="displaykey.Web.PaymentPlansLV.ExpirationDate"
                    value="paymentPlan.ExpirationDate"/>
                </Row>
              </RowIterator>
            </ListViewPanel>
          </ListViewInput>
        </InputColumn>
      </DetailViewPanel>
      <DetailViewPanel
        visible="account.isListBill()">
        <InputColumn>
          <ListViewInput
            boldLabel="true"
            id="InvoiceStreamsListViewInput"
            label="displaykey.Web.NewAccountDV.InvoiceStreams"
            labelAbove="true">
            <Toolbar
              visible="account.BillingPlan != null">
              <AddButton
                id="addInvoiceStreamButton"
                iterator="InvoiceStreamRowIterator"
                label="displaykey.Button.Add"
                pickLocation="AccountAddInvoiceStreamPopup.push(account)"/>
              <IteratorButtons
                addVisible="false"
                iterator="NewAccountInvoiceStreamsLV"/>
            </Toolbar>
            <ListViewPanel
              id="NewAccountInvoiceStreamsLV">
              <RowIterator
                editable="false"
                elementName="invoiceStream"
                id="InvoiceStreamRowIterator"
                toRemove="account.removeEmptyInvoiceStream(invoiceStream)"
                value="account.InvoiceStreams">
                <Row>
                  <Cell
                    id="Name"
                    label="displaykey.Web.NewAccountDV.InvoiceStream"
                    value="invoiceStream.DisplayName"/>
                  <TypeKeyCell
                    id="Description"
                    label="displaykey.Web.NewAccountDV.Periodicity"
                    value="invoiceStream.Periodicity"/>
                  <TypeKeyCell
                    id="EffectiveDate"
                    label="displaykey.Web.NewAccountDV.FixDate"
                    value="invoiceStream.BillDateOrDueDateBilling"/>
                </Row>
              </RowIterator>
            </ListViewPanel>
          </ListViewInput>
        </InputColumn>
      </DetailViewPanel>
    </Screen>
    <Code><![CDATA[function createNewAccount() : Account {
   return new Account(currency, CurrentLocation)
}

function processAccountBeforeValidate(){
   addPaymentPlansToListBillAccount()
   removeInvoiceStreamsFromNonListBillAccount()
}

function addPaymentPlansToListBillAccount() {
   if(account.isListBill()){
     account.resyncPaymentPlans(listBillPaymentPlans)
   }
}

function removeInvoiceStreamsFromNonListBillAccount() {
    if(not account.isListBill()){
      for(var invoiceStream in account.InvoiceStreams){
        account.removeEmptyInvoiceStream(invoiceStream)
      }
    }
  }

function updateBillingLevel() {
  if (invoiceBy) {
    account.BillingLevel = BillingLevel.TC_ACCOUNT
    separateIncomingFundsBy = true
  } else if (separateIncomingFundsBy) {
    account.BillingLevel = BillingLevel.TC_POLICYDEFAULTUNAPPLIED
  } else {
    account.BillingLevel = BillingLevel.TC_POLICYDESIGNATEDUNAPPLIED
  }
}]]></Code>
  </Page>
</PCF>